// This is the sketch of the code used by us in FreeFem, a tool we learned to use for simulations
// during CFD course. The following code was our first attempt of running a CFD simulations for the
// bacward_step control problem. This was our raw sketch for building then the flow_solver class in
// our library.

// All the parameters (Reynolds Number, Geometry of the channel, Frequency (based on Strouhal Number) were
// chosen according to the parameters present in the article :
// "Control of turbulent separated flow over a backard-facing step by local forcing"
// by K.B. Chun and H.J. Sung



// Geometry desired :

// N.B. :
// label = 4 --> walls with Non-slip condition
// label = 1 --> inlet (Dirichlet BC)
// label = 2 --> outlet (Neumann BC)
// label  = 3 --> Jets introduction

// n is the mesh-refinement parameter, we decided to intensify the mesh resolution near the step
int n=10;

border b1(t= 10,30) {x=t;y=0;label =4;}
border b2(t= 0,3) {x=30;y=t;label =2;}
border b3(t=30,0) {x=t;y=3;label =4;}
border b4(t= 3,1) {x=0;y=t;label =1;}
border b5(t= 0,9.8) {x=t;y=1;label =4;}
border b6(t=0,0.2) {x=9.8+t;y=1-t;label =3;}
border b7(t=0.8,0) {x=10;y=t;label =4;}
mesh Th = buildmesh (b1(20*n)+b2(3*n)+b3(30*n)+b4(2*n)+b5(9.8*n)+b6(n)+b7(0.8*n));
plot (Th);

// Build Finite element spaces (solve with FEM)

// We will use Incremental C-T, so
// we built two different fespaces compatible for velocity and pressure.
// The code is easily adaptable to pass from the Incremental Chorin-Temam method to the
// Algebraic C-T by means of substituting the problem with Variational forms (varf in FreeFem language)
// And then assemble them as matricesin a straightforward way

fespace Vh(Th, [P1b,P1b]);   // fespace Vh(Th,[P2,P2])
fespace Qh(Th,P1);

real Re = 13000;
real Tf = 120;
real t=0;
real dt = 0.2;
real gn=0;
real jet=40;

Vh [ux0h,uy0h], [uxh,uyh], [vxh,vyh] ;
Qh p0h,dph,qh;


// Build the Macros, which will be used in building the varf or the problem step to solve

macro Grad(f) [dx(f), dy(f)] //
macro Grad2D(fx,fy) [dx(fx),dy(fx),dx(fy),dy(fy)] //
macro SymGrad2D(fx,fy) [dx(fx) , 0.5*(dy(fx)+dx(fy)), 0.5*(dx(fy)+dy(fx)), dy(fy)] //
// It is (grad(u) + grad(u)^T) / 2
macro Div (fx,fy) (dx(fx) + dy(fy)) //
// scalar
macro UGrad(bx,by,f) [bx,by]' *Grad(f) //
macro UGrad2(bx,by,fx,fy) [UGrad(bx,by,fx) , UGrad(bx,by,fy)] //


// Solve Incremental C-T


// FIRST STEP of C-T
// ( uxh e uyh are u_tilde and ux0h are u_n) Non-linear term treated
// in a semi-explicit way

problem step1 ([uxh,uyh], [vxh,vyh], solver = UMFPACK) =
  int2d(Th)([uxh,uyh]'*[vxh,vyh] / dt
            + UGrad2(ux0h,uy0h,uxh,uyh)' * [vxh, vyh]
            + 2.0*SymGrad2D(uxh,uyh) ' * SymGrad2D(vxh,vyh) /Re )
 // (grad(u)+grad(u)^T)/2 : grad(v) --> filtra parte symm di v ..
 -int2d(Th)([ux0h,uy0h]' * [vxh,vyh] / dt
            - Grad(p0h)'*[vxh,vyh])
// here it is added  -p_n to the l.h.s. --> for consistency purposes (see step 2)
 -int1d(Th,2) (gn*vxh)
 + on(3,uxh=jet*(t>60)*(1-y)*(y-0.8)*abs(sin(t*pi/16)),uyh=jet*(t>60)*(10-x)*(x-9.8)*abs(sin(t*pi/16)))
  // jet imagined as a further Dirichlet BC
 + on(1,uxh=0.5*(-y+1.0)*(y-3.0),uyh=0.0)
 + on(4,uxh=0.0,uyh=0.0);


// SECOND STEP of C-T 
//(Applying divergence to the pressure gradient)
// already corrected adding -p_n to the lhs (p_n+1 ---> dp)

problem step2 (dph,qh,solver=UMFPACK) =
 int2d(Th) (Grad(dph)' *Grad(qh))
 -int2d(Th) (-Div(uxh,uyh) * qh/dt)
 + on(2,dph = 0.0) ;
// + on(3,dph= 0.0) ; Not necessary

// THIRD STEP
// update u : ready to be used in the following step
func int step3()
{
[ux0h,uy0h] = [ uxh - dt * dx(dph), uyh - dt*dy(dph)] ;
}

// FOURTH STEP
// update p :
func int step4()
{
p0h[] += dph[];
}

func int step()
 {
step1;
step2;
step3();
step4();
}

// Initial condition through Stokes problem:
solve stokes ( [ux0h,uy0h,p0h] , [vxh,vyh,qh], solver = UMFPACK) =
      int2d(Th)( 2.0 * SymGrad2D(ux0h,uy0h)' * SymGrad2D(vxh,vyh) / Re
               - p0h* Div(vxh,vyh)
               + Div(ux0h,uy0h) * qh)
     -int1d(Th,2) (gn*vxh)
     + on(3,ux0h=0.0, uy0h=0.0)  // inizializzo con assenza di Jet
     + on(1,ux0h=0.5*(-y+1.0)*(y-3.0),uy0h=0.0)
     + on(4,ux0h=0.0,uy0h=0.0);

//(plot first the initial conditions)
// plot([ux0h,uy0h]);


// N.B. 
// In order to see only the already developed flow affected by the jet control, we decided
// to plot starting from the solution at t=10 seconds, that is ten timesteps (1 second) before the
// first control action.
// Of course this can be easily adapted by changing the parameters in the script to plot and to have
// a timeline simulation as long as desired.


// Build the loop for the time-evolving solution
while(t<Tf)
{
 t+=dt;
 step();
 if(t>50) {
 	plot([ux0h,uy0h],nbarrow=20,coef=0.1,wait=0,cmm= "t=" +t);
  //plot(p0h,wait=0,cmm = "pressure =" +t);
}
}

